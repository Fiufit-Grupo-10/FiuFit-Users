name: Python CI

on:
  pull_request:
    branches: 
      - main
    paths: 
      - app/**
      - tests/**
      - Dockerfile
      - docker-compose.yml
  push:
    branches:
      - main
    
  workflow_dispatch:
  

jobs:
  test:
    runs-on: ubuntu-latest       
    services:
      db:
        image: postgres:15
        volumes:
          - postgres_data:/var/lib/postgresql/data/
        env:
          POSTGRES_DB: fiufit_users_dev
          POSTGRES_USER: fiufit
          POSTGRES_PASSWORD: fiufitpass
          
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432        
        
          
          
             
          

    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with: 
          path: ~/.local
          key: poetry-0
      
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Format with black
        run: poetry run black 'app' --check --verbose --diff --color
      
      - name: Run flake
        run:  poetry run flake8 'app' --max-line-length 100      
      - name: Insert data into database
        env:
          PGPASSWORD: fiufitpass 
        run: |
          psql -h localhost -U fiufit -d fiufit_users_dev -w -f init_database.sql
      - name: Run tests
        env:
          DATABASE_URL: postgresql://fiufit:fiufitpass@localhost/fiufit_users_dev
        run: poetry run pytest -v --cov=app --cov-report term --cov-report xml:coverage.xml tests/
      - name: Upload coverage
        if: ${{ !inputs.skipTests }}  # upload when we really run our tests
        uses: codecov/codecov-action@v3
        continue-on-error: true  # we don't care if it fails
        with:
          token: ${{secrets.CODECOV_TOKEN}}  # set in repository settings
          file: ./coverage.xml  # file from the previous step
          fail_ci_if_error: false


